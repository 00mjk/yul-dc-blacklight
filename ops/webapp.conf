# Enable X-Forwarded-For
log_format  main  '$http_x_forwarded_for - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent"';

passenger_log_file /dev/stdout;

## Extend timeouts to account for proxy delays
# TODO this may not be needed for our setup
client_body_timeout       1m;
client_header_timeout     1m;
# keepalive_timeout         5m;
send_timeout              5m;

server {
    error_log /dev/stdout;
    access_log /dev/stdout;
    listen 3000;
    server_name _;
    root /home/app/webapp/public;
    client_body_in_file_only clean;
    client_body_buffer_size 32K;

    client_max_body_size 0;

    sendfile on;
    send_timeout 300s;
    # The following deploys your Ruby/Python/Node.js/Meteor app on Passenger.
    passenger_enabled on;
    passenger_user app;

    # If this is a Ruby app, specify a Ruby version:
    # For Ruby 2.6
    passenger_ruby /usr/bin/ruby2.6;

    ## Proxy this location to canteloupe. Done by load balancer in production
    ## but needed for development to make the both the same
    location ^~ /authorized-iiif {
       ## Override the connection timeouts
        proxy_connect_timeout       5m;
        proxy_send_timeout          5m;
        proxy_read_timeout          5m;

        ## Make sure we're sending the correct client information to the API server and not
        ## the NGINX server
        proxy_set_header       X-Real-IP        $remote_addr;
        proxy_set_header       X-Forwarded-For  $proxy_add_x_forwarded_for;

        ## We don't want Cantaloupe to set any cookie information
        proxy_hide_header      Set-Cookie;
        proxy_ignore_headers   Set-Cookie;

        ## Make sure to unset/hide any authorization requests from Cantaloupe so the client does not get an annoying popup
        proxy_hide_header      WWW-Authorization;
        proxy_hide_header      Authorization;

        ## Add any headers you would like back to the client
        ## I send the API request ID for debugging purposes
        add_header             X-Request-Id $saved_request_id;

        rewrite    /authorized-iiif/(.*) /iiif/$1 break;
        proxy_pass @@image_internal_url@@;
    }

    ## Location or path of limited access media
    location ^~  /iiif {
        ## Override the connection timeout making sure the proxy server has time to respond
        ## TODO may not be needed
        proxy_connect_timeout       5m;
        proxy_send_timeout          5m;
        proxy_read_timeout          5m;

        ## Make sure we're sending the correct client information to the API server and not
        ## the NGINX server
        proxy_set_header            X-Real-IP        $remote_addr;
        proxy_set_header            X-Forwarded-For  $proxy_add_x_forwarded_for;
        proxy_set_header            X-Forwarded-Proto $scheme;
        proxy_set_header            X-Forwarded-Host $host;
        proxy_set_header            X-Forwarded-Port $server_port;
        proxy_set_header            X-Forwarded-Path /;
        ## Adding a header to verify the request is coming from NGINX on the server
        ##
        ## TODO Find a better way not to store this in the file
        ##  NGINX does not allow ENV variables, so you can use a
        ##   deployment script to update the value
        ## proxy_set_header   X-Nginx-Secret   'some-super-secret-key';

        proxy_redirect off; # We don't want a redirect to be passed to the client - NGINX needs to handle it
        proxy_pass http://127.0.0.1:3000/check-iiif; # Send the user access request to the API server

        # proxy_ssl_server_name on; # Enable for HTTPS

        ## Enabled so that NGINX can handle the response from the api server
        recursive_error_pages on;
        proxy_intercept_errors on;

        ## Define the errors NGNIX will handle from the API Server
        error_page 301 302 307  = @handle_redirect;         # The user has access to the media - redirect to presigned URL
        error_page 401 403      = @unauthorized;            # The user does not have access to the media
        error_page 404          = @not_found;               # Could not find the media
        error_page 500 503      = @internal_server_error;   # There was an issue on the API server

        ## Enable CORS if needed for any 3rd party tools
        if ($http_origin ~ '^http(s)?://') {
          add_header Access-Control-Allow-Origin $http_origin always;
          add_header Access-Control-Allow-Methods 'OPTIONS, HEAD, GET' always;
          add_header Access-Control-Allow-Credentials true always;
        }
    }

    ## The API server granted the user access to the media
    ## Redirect to a presigned AWS S3 URL to the media
    location @handle_redirect {
        set $saved_redirect_location '$upstream_http_location'; # Save the url location the API is redirecting to
        set $saved_request_id '$upstream_http_x_request_id';    # Save the Request ID returned from the API server

        ## Override the connection timeouts
        proxy_connect_timeout       5m;
        proxy_send_timeout          5m;
        proxy_read_timeout          5m;

        ## Make sure we're sending the correct client information to the API server and not
        ## the NGINX server
        proxy_set_header            X-Real-IP        $remote_addr;
        proxy_set_header            X-Forwarded-For  $proxy_add_x_forwarded_for;
        proxy_set_header            X-Forwarded-Proto $scheme;
        proxy_set_header            X-Forwarded-Host $host;
        proxy_set_header            X-Forwarded-Port $server_port;
        proxy_set_header            X-Forwarded-Path /;

        ## We don't want Cantaloupe to set any coookie information
        proxy_hide_header      Set-Cookie;
        proxy_ignore_headers   Set-Cookie;

        ## Make sure to unset/hide any authorization requests from Cantaloupe so the client does not get an annoying popup
        proxy_hide_header      WWW-Authorization;
        proxy_hide_header      Authorization;

        ## Add any headers you would like back to the client
        ## I send the API request ID for debugging purposes
        add_header             X-Request-Id $saved_request_id;

        ## Make the request to Cantaloupe using the generated URL
        proxy_pass $saved_redirect_location;

        ## Intercept any errors that Cantaloupe returns
        proxy_intercept_errors on;
        error_page 301 302 307  = @handle_redirect;         # Handle a redirect from Cantaloupe
        error_page 401 403      = @unauthorized;            # AWS signed url was invalid
        error_page 404          = @not_found;               # AWS could not find the media
        error_page 500 503      = @internal_server_error;   # Something is wrong with Cantaloupe or the request

        ## Handle any CORS that a 3rd party is expecting here
        if ($http_origin ~ '^http(s)?://') {
          add_header Access-Control-Allow-Origin $http_origin always;
          add_header Access-Control-Allow-Methods 'OPTIONS, HEAD, GET' always;
          add_header Access-Control-Allow-Credentials true always;
        }
      }

      ## An example of handling an unauthorized error
      location @unauthorized {
        rewrite ^ /403?request_uri=$uri;
      }

      ## An example of handling a 404 error
      location @not_found {
        rewrite ^ /404?request_uri=$uri;
      }

      ## An example of handling a 500 error
      location @internal_server_error {
          rewrite ^ /500?request_uri=$uri;
        }

}
